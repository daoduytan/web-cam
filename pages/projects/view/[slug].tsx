import useSWR, { SWRConfig } from 'swr'
import { NextPage } from 'next';
import Head from 'next/head';
import { IProject } from '../../../collection';
import {
	Background,
	Container,
	Header,
	ImageCus,
	Paragraph,
	Text,
	Title
} from '../../../components';
import get from 'lodash/get'

// const fetcher = (args: any) => fetch(...args).then(res => res.json())

const fetcher = async (url: string) => await fetch(url).then((res) => res.json());

interface Props {
	project: IProject;
	slug: string;
}

function ParagraphRender({ text, className }: { text: string, className?: string }) {
	let arrText = text.split('\n').filter((item) => item.length > 0);

	return (
		<>
			{arrText.map((item, index) => (
				<Paragraph className={className} key={index}>{item}</Paragraph>
			))}
		</ >

	);
}

const ProjectDetail: NextPage<Props> = ({ project, slug }) => {

	const { data, error } = useSWR(`/api/project/view/${slug}`, fetcher, { fallbackData: project, refreshInterval: 30000 })

	console.log('dads', data.data, project)

	const project1 = get(data, 'data')

	if (error) {
		return <div>404</div>;
	}

	if (!project1) {
		return <div>loading</div>;
	}

	return (
		<SWRConfig value={project as any}>
			<Background>
				<Head>
					<title>Create Next App</title>
					<meta name="description" content="Generated by create next app" />
					<link rel="icon" href="/favicon.ico" />
				</Head>

				<Header />

				<main className='mt-12'>
					<Container>
						<div className="grid gap-8">
							<div className="text-center ">
								<Title level="1" className="uppercase font-medium text-3xl md:text-5xl lg:text-7xl mb-5">
									{project.title}
								</Title>

								<Text className="uppercase text-sm md:text-2xl lg:text-3xl">{project.service}</Text>
							</div>

							<div className='text-base md:text-xl'>
								<ParagraphRender className="mb-5" text={project.description} />
							</div>

							{(project.content || []).map((block: any) => {
								const renderBlock = () => {
									if (block.type === 'image') {
										return (
											<div className='-mx-4'>
												<ImageCus
													key={block.key}
													src={block.value}
													alt=""
													layout='fill'
												/>

											</div>

										);
									}

									return <ParagraphRender text={block.value} key={block.key} />;
								};

								return <div key={block.key}>{renderBlock()}</div>;
							})}

							{project.credits && (
								<div>
									<div className="text-base md:text-lg">
										<Text>Credit</Text>

										<ParagraphRender text={project.credits} />
									</div>
								</div>
							)}
						</div>
					</Container>
				</main>
			</Background>
		</SWRConfig >

	);
};

export async function getStaticPaths() {
	const res = await fetch('https://web-cam-gules.vercel.app/api/project');

	const data = await res.json();

	const paths = data.data.map((project: IProject) => ({
		params: { slug: project.slug },
	}));

	return {
		paths,
		fallback: true, // false or 'blocking'
	};
}

export async function getStaticProps(context: any) {
	// Call an external API endpoint to get posts.
	// You can use any data fetching library
	const res = await fetch(
		`https://web-cam-gules.vercel.app/api/project/view/${context.params.slug}`
	);

	const { data } = await res.json();

	// By returning { props: { posts } }, the Blog component
	// will receive `posts` as a prop at build time
	return {
		props: {
			project: data,
			slug: context.params.slug
		},
		revalidate: 1
	};
}

export default ProjectDetail;
